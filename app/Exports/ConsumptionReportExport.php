<?php

namespace App\Exports;

use Maatwebsite\Excel\Concerns\FromCollection;
use App\models\raisoni\ConsumptionReport;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\Exportable;
use Maatwebsite\Excel\Concerns\WithEvents;
use Maatwebsite\Excel\Events\AfterSheet;
use Maatwebsite\Excel\Concerns\ShouldAutoSize;
use Maatwebsite\Excel\Concerns\WithCustomStartCell;
use App\models\raisoni\SessionsMaster;
use App\models\raisoni\DegreeMaster;
use App\models\raisoni\BranchMaster;
use App\models\raisoni\SemesterMaster;
use App\models\raisoni\SectionMaster;
use DB;

class ConsumptionReportExport implements FromCollection, WithCustomStartCell , WithHeadings,WithEvents, ShouldAutoSize

{
    protected $exam; 
    protected $degree;
    protected $branch;
    protected $scheme;
    protected $term;
    protected $section;
    protected $fromDate;
    protected $toDate;

    function __construct($exam,$degree,$branch,$scheme,$term,$section,$fromDate,$toDate) {
        $this->exam = $exam;
        $this->degree = $degree;
        $this->branch = $branch;
        $this->scheme = $scheme;
        $this->term = $term;
        $this->section = $section;
        $this->fromDate = $fromDate;
        $this->toDate = $toDate;
    }
    /**
    * @return \Illuminate\Support\Collection
    */
    public function collection()
    {
        
        $where_str    = "1 = ?";
        $where_params = array(1);   
        DB::statement(DB::raw('set @rownum=0'));   
        $columns = [DB::raw('@rownum  := @rownum  + 1 AS rownum'),'registration_no',DB::raw("CONCAT(section,' - ', roll_no)"),'student_name','serial_no','updated_at'];

        if (!empty($this->exam)) {
            $exam = $this->exam;
            $where_str .= " AND (examination = '$exam')";
        }
        if (!empty($this->degree)) {
            $degree = $this->degree;
            $where_str .= " AND (programme = '$degree')";
        }
        if (!empty($this->branch)) {
            $branch = $this->branch;
            $where_str .= " AND (department = '$branch')";
        }
        if (!empty($this->scheme)) {
            $scheme = $this->scheme;
            $where_str .= " AND (scheme = '$scheme')";
        }
        if (!empty($this->term)) {
            $term = $this->term;
            $where_str .= " AND (term = '$term')";
        }
        if (!empty($this->section)) {
            $section = $this->section;
            $where_str .= " AND (section = '$section')";
        }
        if (!empty($this->fromDate) && !empty($this->toDate)){
            $fromDate = date('Y-m-d', strtotime($this->fromDate));
            $toDate = date('Y-m-d', strtotime($this->toDate));
            $range_condition = " AND (DATE(updated_at) >= '$fromDate' && DATE(updated_at) <= '$toDate')";
            $where_str .= $range_condition;
        }

        $ConsumptionReportExport = ConsumptionReport::select($columns)
                 ->whereRaw($where_str, $where_params)
                 ->orderBy('roll_no','asc')
                 ->orderBy('section','asc')
                 ->get()->toArray();

                 
     	return collect($ConsumptionReportExport);

    }

    public function startCell(): string
    {
        return 'A3';
    }
    
    public function headings(): array{
        $row = ['Sr. No.','Registration Number','Section-Roll','Name Of Student','Grade Card Serial Number','Punching Date'];
        return $row;
    }

    public function registerEvents(): array
    {
        $user_data = \auth::guard('admin')->user()->username;
        
        
        return [
            AfterSheet::class    => function(AfterSheet $event) use ($user_data){
                $event->sheet->SetCellValue('A1', "Report Generated By : ".$user_data);
                $event->sheet->mergeCells('A1:C1');
                $event->sheet->SetCellValue('D1', "Exam Name : ".$this->exam);
                $event->sheet->SetCellValue('E1', "Degree : ".$this->degree);
                $event->sheet->SetCellValue('F1', "Branch : ".$this->branch);
                $event->sheet->SetCellValue('G1', "Scheme : ".$this->scheme);
                $event->sheet->SetCellValue('H1', "Semester : ".$this->term);
                $event->sheet->SetCellValue('I1', "Section : ".$this->section);
                $event->sheet->SetCellValue('J1', "From Date : ".$this->fromDate);
                $event->sheet->SetCellValue('K1', "To Date : ".$this->toDate);
                $cellRange = 'A1:k1'; 
                $event->sheet->getDelegate()->getStyle($cellRange)->getFont()->setBold(true);
                $cellRange = 'A3:g3'; // All headers
                $event->sheet->getDelegate()->getStyle($cellRange)->getFont()->setBold(true);
            },
        ];
    }
}
